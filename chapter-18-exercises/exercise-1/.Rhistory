analysis_params <- list("query" = actor_id, "api_key" = tmbd_key)
resource_uri <- paste0(base_uri, "/discover/movie")
response <- GET(resource_uri, query = analysis_params)
response_text <- content(response, as = "text") # Extract content of request's response
response_data <- fromJSON(response_text)
actor_popularity <- response_data[["results"]][["popularity"]]
movie_release_dates <- response_data[["results"]][["release_date"]]
actor_analysis_df <- data.frame(actor_popularity, movie_release_dates, stringsAsFactors = FALSE)
View(actor_analysis_df)
#actor_list$average_popularity <- mean(actor_list$popularity)
# filter(movie_release_dates == startsWith(movie_release_dates, "2020"))
#summarize(sum())
#actor_list <- list(release_date = movie_release_dates,
#popularity = actor_popularity)
#return(actor_list)
}
practice_analyze_actor <- analyze_actor(287)
analyze_actor <- function(actor_id){
analysis_params <- list("query" = actor_id, "api_key" = tmbd_key)
resource_uri <- paste0(base_uri, "/discover/movie")
response <- GET(resource_uri, query = analysis_params)
response_text <- content(response, as = "text") # Extract content of request's response
response_data <- fromJSON(response_text)
actor_popularity <- response_data[["results"]][["popularity"]]
movie_release_dates <- response_data[["results"]][["release_date"]]
actor_analysis_df <- data.frame(actor_popularity, movie_release_dates, stringsAsFactors = FALSE)
actor_analysis_df %>%
filter(movie_release_dates == startsWith(movie_release_dates, "2020"))
View(actors_analysis_df)
#actor_list$average_popularity <- mean(actor_list$popularity)
#summarize(sum())
#actor_list <- list(release_date = movie_release_dates,
#popularity = actor_popularity)
#return(actor_list)
}
practice_analyze_actor <- analyze_actor(287)
analyze_actor <- function(actor_id){
analysis_params <- list("query" = actor_id, "api_key" = tmbd_key)
resource_uri <- paste0(base_uri, "/discover/movie")
response <- GET(resource_uri, query = analysis_params)
response_text <- content(response, as = "text") # Extract content of request's response
response_data <- fromJSON(response_text)
actor_popularity <- response_data[["results"]][["popularity"]]
movie_release_dates <- response_data[["results"]][["release_date"]]
actor_analysis_df <- data.frame(actor_popularity, movie_release_dates, stringsAsFactors = FALSE)
actor_analysis_df %>%
filter(movie_release_dates == startsWith(movie_release_dates, "2020"))
View(actor_analysis_df)
#actor_list$average_popularity <- mean(actor_list$popularity)
#summarize(sum())
#actor_list <- list(release_date = movie_release_dates,
#popularity = actor_popularity)
#return(actor_list)
}
practice_analyze_actor <- analyze_actor(287)
analyze_actor <- function(actor_id){
analysis_params <- list("query" = actor_id, "api_key" = tmbd_key)
resource_uri <- paste0(base_uri, "/discover/movie")
response <- GET(resource_uri, query = analysis_params)
response_text <- content(response, as = "text") # Extract content of request's response
response_data <- fromJSON(response_text)
actor_popularity <- response_data[["results"]][["popularity"]]
movie_release_dates <- response_data[["results"]][["release_date"]]
actor_analysis_df <- data.frame(actor_popularity, movie_release_dates, stringsAsFactors = FALSE)
actor_analysis_df %>%
filter(movie_release_dates == startsWith(movie_release_dates, "2020"))
View(actor_analysis_df)
#actor_list$average_popularity <- mean(actor_list$popularity)
#summarize(sum())
#actor_list <- list(release_date = movie_release_dates,
#popularity = actor_popularity)
#return(actor_list)
}
# Test analyze_actor function
practice_analyze_actor <- analyze_actor(287)
View(practice_actor_data_function)
analyze_actor <- function(actor_id){
analysis_params <- list("query" = actor_id, "api_key" = tmbd_key)
resource_uri <- paste0(base_uri, "/discover/movie")
response <- GET(resource_uri, query = analysis_params)
response_text <- content(response, as = "text") # Extract content of request's response
response_data <- fromJSON(response_text)
actor_popularity <- response_data[["results"]][["popularity"]]
movie_release_dates <- response_data[["results"]][["release_date"]]
actor_analysis_df <- data.frame(actor_popularity, movie_release_dates, stringsAsFactors = FALSE)
actor_analysis_df %>%
filter(startsWith(movie_release_dates, "2020"))
View(actor_analysis_df)
#actor_list$average_popularity <- mean(actor_list$popularity)
#summarize(sum())
#actor_list <- list(release_date = movie_release_dates,
#popularity = actor_popularity)
#return(actor_list)
}
practice_analyze_actor <- analyze_actor(287)
analyze_actor <- function(actor_id){
analysis_params <- list("query" = actor_id, "api_key" = tmbd_key)
resource_uri <- paste0(base_uri, "/discover/movie")
response <- GET(resource_uri, query = analysis_params)
response_text <- content(response, as = "text") # Extract content of request's response
response_data <- fromJSON(response_text)
actor_popularity <- response_data[["results"]][["popularity"]]
movie_release_dates <- response_data[["results"]][["release_date"]]
actor_analysis_df <- data.frame(actor_popularity, movie_release_dates, stringsAsFactors = FALSE)
actor_analysis_df <- filter(actor_analysis_df, startsWith(movie_release_dates, "2020"))
View(actor_analysis_df)
#actor_list$average_popularity <- mean(actor_list$popularity)
#summarize(sum())
#actor_list <- list(release_date = movie_release_dates,
#popularity = actor_popularity)
#return(actor_list)
}
practice_analyze_actor <- analyze_actor(287)
# Analysis of an Actor #
# What is Brad Pitt's average popularity so far in 2020?
analyze_actor <- function(actor_id){
analysis_params <- list("query" = actor_id, "api_key" = tmbd_key)
resource_uri <- paste0(base_uri, "/discover/movie")
response <- GET(resource_uri, query = analysis_params)
response_text <- content(response, as = "text") # Extract content of request's response
response_data <- fromJSON(response_text)
actor_popularity <- response_data[["results"]][["popularity"]]
movie_release_dates <- response_data[["results"]][["release_date"]]
actor_analysis_df <- data.frame(movie_release_dates, actor_popularity, stringsAsFactors = FALSE)
actor_analysis_df <- actor_analysis_df %>%
actor_analysis_df <- filter(startsWith(movie_release_dates, "2020")) %>%
summarize(average_popularity_in_2020 = mean(actor_popularity))
View(actor_analysis_df)
#actor_list$average_popularity <- mean(actor_list$popularity)
#summarize(sum())
#actor_list <- list(release_date = movie_release_dates,
#popularity = actor_popularity)
#return(actor_list)
}
practice_analyze_actor <- analyze_actor(287)
analyze_actor <- function(actor_id){
analysis_params <- list("query" = actor_id, "api_key" = tmbd_key)
resource_uri <- paste0(base_uri, "/discover/movie")
response <- GET(resource_uri, query = analysis_params)
response_text <- content(response, as = "text") # Extract content of request's response
response_data <- fromJSON(response_text)
actor_popularity <- response_data[["results"]][["popularity"]]
movie_release_dates <- response_data[["results"]][["release_date"]]
actor_analysis_df <- data.frame(movie_release_dates, actor_popularity, stringsAsFactors = FALSE)
actor_analysis_df <- actor_analysis_df %>%
filter(startsWith(movie_release_dates, "2020")) %>%
summarize(average_popularity_in_2020 = mean(actor_popularity))
View(actor_analysis_df)
#actor_list$average_popularity <- mean(actor_list$popularity)
#summarize(sum())
#actor_list <- list(release_date = movie_release_dates,
#popularity = actor_popularity)
#return(actor_list)
}
practice_analyze_actor <- analyze_actor(287)
analyze_actor <- function(actor_id){
analysis_params <- list("query" = actor_id, "api_key" = tmbd_key)
resource_uri <- paste0(base_uri, "/discover/movie")
response <- GET(resource_uri, query = analysis_params)
response_text <- content(response, as = "text") # Extract content of request's response
response_data <- fromJSON(response_text)
actor_popularity <- response_data[["results"]][["popularity"]]
movie_release_dates <- response_data[["results"]][["release_date"]]
actor_analysis_df <- data.frame(movie_release_dates, actor_popularity, stringsAsFactors = FALSE)
actor_analysis_df <- actor_analysis_df %>%
filter(startsWith(movie_release_dates, "2020")) %>%
summarize(average_popularity_in_2020 = mean(actor_popularity)) %>%
select(movie_release_dates, actor_popularity, average_popularity_in_2020)
View(actor_analysis_df)
#actor_list$average_popularity <- mean(actor_list$popularity)
#summarize(sum())
#actor_list <- list(release_date = movie_release_dates,
#popularity = actor_popularity)
#return(actor_list)
}
practice_analyze_actor <- analyze_actor(287)
analyze_actor <- function(actor_id){
analysis_params <- list("query" = actor_id, "api_key" = tmbd_key)
resource_uri <- paste0(base_uri, "/discover/movie")
response <- GET(resource_uri, query = analysis_params)
response_text <- content(response, as = "text") # Extract content of request's response
response_data <- fromJSON(response_text)
actor_popularity <- response_data[["results"]][["popularity"]]
movie_release_dates <- response_data[["results"]][["release_date"]]
actor_analysis_df <- data.frame(movie_release_dates, actor_popularity, stringsAsFactors = FALSE)
actor_analysis_df <- actor_analysis_df %>%
filter(startsWith(movie_release_dates, "2020")) %>%
mutate(average_popularity_in_2020 = mean(actor_popularity))
View(actor_analysis_df)
#actor_list$average_popularity <- mean(actor_list$popularity)
#summarize(sum())
#actor_list <- list(release_date = movie_release_dates,
#popularity = actor_popularity)
#return(actor_list)
}
practice_analyze_actor <- analyze_actor(287)
analyze_actor <- function(actor_id){
analysis_params <- list("query" = actor_id, "api_key" = tmbd_key)
resource_uri <- paste0(base_uri, "/discover/movie")
response <- GET(resource_uri, query = analysis_params)
response_text <- content(response, as = "text") # Extract content of request's response
response_data <- fromJSON(response_text)
actor_popularity <- response_data[["results"]][["popularity"]]
movie_release_dates <- response_data[["results"]][["release_date"]]
actor_analysis_df <- data.frame(movie_release_dates, actor_popularity, stringsAsFactors = FALSE)
average_popularity <- actor_analysis_df %>%
filter(startsWith(movie_release_dates, "2020")) %>%
summarize(average_popularity_in_2020 = mean(actor_popularity))
actor_list <- list(release_date = movie_release_dates,
popularity = actor_popularity,
"average_popularity" = average_popularity)
View(actor_analysis_df)
#return(actor_list)
}
practice_analyze_actor <- analyze_actor(287)
analyze_actor <- function(actor_id){
analysis_params <- list("query" = actor_id, "api_key" = tmbd_key)
resource_uri <- paste0(base_uri, "/discover/movie")
response <- GET(resource_uri, query = analysis_params)
response_text <- content(response, as = "text") # Extract content of request's response
response_data <- fromJSON(response_text)
actor_popularity <- response_data[["results"]][["popularity"]]
movie_release_dates <- response_data[["results"]][["release_date"]]
actor_analysis_df <- data.frame(movie_release_dates, actor_popularity, stringsAsFactors = FALSE)
average_popularity <- actor_analysis_df %>%
filter(startsWith(movie_release_dates, "2020")) %>%
summarize(average_popularity_in_2020 = mean(actor_popularity))
actor_list <- list(release_date = movie_release_dates,
popularity = actor_popularity,
average_popularity_in_2020 = average_popularity)
return(actor_list)
}
practice_analyze_actor <- analyze_actor(287)
View(practice_analyze_actor)
get_trending_table <- function(){
resource_uri <- paste0(base_uri,"/trending/person/week") # Paste together base uri and endpoint
response <- GET(resource_uri, query = key_param) # Use GET to send request to "Get Trending"
response_text <- content(response, as = "text") # Extract content of request's response
response_data <- fromJSON(response_text) # Convert JSON string into a list
trending_df <- as.data.frame(response_data$results) # Create data frame of trending data
trending_df <- filter(trending_df, known_for_department == "Acting") # Filter for only people known for acting
trending_df <- mutate(trending_df, photo = paste("https://image.tmdb.org/t/p/h100",profile_path, sep = "")) # Make column for actor's photo
trending_df <- select(trending_df, name, photo)# Select only people and photo columns
trending_df <- head(trending_df, 5) # Include only first 5 actors
return(trending_df) # Return trending df
}
get_trending_table <- function(){
resource_uri <- paste0(base_uri,"/trending/person/week") # Paste together base uri and endpoint
response <- GET(resource_uri, query = key_param) # Use GET to send request to "Get Trending"
response_text <- content(response, as = "text") # Extract content of request's response
response_data <- fromJSON(response_text) # Convert JSON string into a list
trending_df <- as.data.frame(response_data$results) # Create data frame of trending data
trending_df <- filter(trending_df, known_for_department == "Acting") # Filter for only people known for acting
trending_df <- mutate(trending_df, photo = paste("https://image.tmdb.org/t/p/h100",profile_path, sep = "")) # Make column for actor's photo
trending_df <- select(trending_df, name, photo)# Select only people and photo columns
trending_df <- head(trending_df, 5) # Include only first 5 actors
return(trending_df) # Return trending df
}
# Test get_trending_table function
trending_actor_df <- get_trending_table()
#Specific Factor Data#
# A function that expects an actor's name and returns a list of data about that actor
get_actor_data <- function(name){
params_list <- list(query = name, "api_key" = tmbd_key) # Create parameters
resource_uri <- paste0(base_uri, "/search/person") # Paste together base uri and endpoint
response <- GET(resource_uri, query = params_list) # Use GET to send request to "Search People"
response_text <- content(response, as = "text") # Extract content of request's response
response_data <- fromJSON(response_text) # Convert JSON string into a list
actor_id <- response_data$results$id # Extract actor id
actor_titles <- response_data$results$known_for[[1]]$title # Extract vector of titles
response <- GET(paste0(base_uri, "/person/", actor_id), query = params_list) # Use GET to "GET Person Details"
response_text <- content(response, as = "text") # Extract content of request's response
response_data <- fromJSON(response_text) # Convert JSON string into a list
actor_list <- response_data[c("name", "id", "imdb_id", "biography")] # Turn response data into a list about the actor
actor_list$movie_titles <- actor_titles # Add actor movie titles to the actor_list
return(actor_list) # Return actor list
}
# Test get_actor_data function
practice_actor_data_function <- get_actor_data("Brad Pitt")
# Analysis of an Actor #
# What is Brad Pitt's average popularity so far in 2020?
analyze_actor <- function(actor_id){
analysis_params <- list("query" = actor_id, "api_key" = tmbd_key)
resource_uri <- paste0(base_uri, "/discover/movie")
response <- GET(resource_uri, query = analysis_params)
response_text <- content(response, as = "text") # Extract content of request's response
response_data <- fromJSON(response_text)
actor_popularity <- response_data[["results"]][["popularity"]]
movie_release_dates <- response_data[["results"]][["release_date"]]
actor_analysis_df <- data.frame(movie_release_dates, actor_popularity, stringsAsFactors = FALSE)
average_popularity <- actor_analysis_df %>%
filter(startsWith(movie_release_dates, "2020")) %>%
summarize(average_popularity_in_2020 = mean(actor_popularity))
actor_list <- list(release_date = movie_release_dates,
popularity = actor_popularity,
average_popularity_in_2020 = average_popularity)
return(actor_list)
}
# Put Brad Pitt's Actor id into a variable
actor_id <- 287
# Test analyze_actor function
practice_analyze_actor <- analyze_actor(287)
# A function that accesses information on trending data and returns a data frame of information
get_trending_table <- function(){
resource_uri <- paste0(base_uri,"/trending/person/week") # Paste together base uri and endpoint
response <- GET(resource_uri, query = key_param) # Use GET to send request to "Get Trending"
response_text <- content(response, as = "text") # Extract content of request's response
response_data <- fromJSON(response_text) # Convert JSON string into a list
trending_df <- as.data.frame(response_data$results) # Create data frame of trending data
trending_df <- filter(trending_df, known_for_department == "Acting") # Filter for only people known for acting
trending_df <- mutate(trending_df, photo = print(paste("https://image.tmdb.org/t/p/h100", profile_path, sep = ""))) # Make column for actor's photo
trending_df <- select(trending_df, name, photo)# Select only people and photo columns
trending_df <- head(trending_df, 5) # Include only first 5 actors
return(trending_df) # Return trending df
}
get_trending_table <- function(){
resource_uri <- paste0(base_uri,"/trending/person/week") # Paste together base uri and endpoint
response <- GET(resource_uri, query = key_param) # Use GET to send request to "Get Trending"
response_text <- content(response, as = "text") # Extract content of request's response
response_data <- fromJSON(response_text) # Convert JSON string into a list
trending_df <- as.data.frame(response_data$results) # Create data frame of trending data
trending_df <- filter(trending_df, known_for_department == "Acting") # Filter for only people known for acting
trending_df <- mutate(trending_df, photo = paste("!",[name],"https://image.tmdb.org/t/p/h100", profile_path, sep = "" ) # Make column for actor's photo
trending_df <- select(trending_df, name, photo)# Select only people and photo columns
trending_df <- head(trending_df, 5) # Include only first 5 actors
return(trending_df) # Return trending df
}
get_trending_table <- function(){
resource_uri <- paste0(base_uri,"/trending/person/week") # Paste together base uri and endpoint
response <- GET(resource_uri, query = key_param) # Use GET to send request to "Get Trending"
response_text <- content(response, as = "text") # Extract content of request's response
response_data <- fromJSON(response_text) # Convert JSON string into a list
trending_df <- as.data.frame(response_data$results) # Create data frame of trending data
trending_df <- filter(trending_df, known_for_department == "Acting") # Filter for only people known for acting
trending_df <- mutate(trending_df, photo = paste("https://image.tmdb.org/t/p/h100", profile_path, sep = "" ) # Make column for actor's photo
trending_df <- select(trending_df, name, photo)# Select only people and photo columns
trending_df <- head(trending_df, 5) # Include only first 5 actors
return(trending_df) # Return trending df
}
library("httr")
library("jsonlite")
library("dplyr")
library("httr")
library("jsonlite")
library("dplyr")
get_trending_table <- function(){
resource_uri <- paste0(base_uri,"/trending/person/week") # Paste together base uri and endpoint
response <- GET(resource_uri, query = key_param) # Use GET to send request to "Get Trending"
response_text <- content(response, as = "text") # Extract content of request's response
response_data <- fromJSON(response_text) # Convert JSON string into a list
trending_df <- as.data.frame(response_data$results) # Create data frame of trending data
trending_df <- filter(trending_df, known_for_department == "Acting") # Filter for only people known for acting
trending_df <- mutate(trending_df, photo = paste("!", "https://image.tmdb.org/t/p/h100", profile_path, sep = "")) # Make column for actor's photo
trending_df <- select(trending_df, name, photo)# Select only people and photo columns
trending_df <- head(trending_df, 5) # Include only first 5 actors
return(trending_df) # Return trending df
}
get_trending_table <- function(){
resource_uri <- paste0(base_uri,"/trending/person/week") # Paste together base uri and endpoint
response <- GET(resource_uri, query = key_param) # Use GET to send request to "Get Trending"
response_text <- content(response, as = "text") # Extract content of request's response
response_data <- fromJSON(response_text) # Convert JSON string into a list
trending_df <- as.data.frame(response_data$results) # Create data frame of trending data
trending_df <- filter(trending_df, known_for_department == "Acting") # Filter for only people known for acting
trending_df <- mutate(trending_df, photo = paste("https://image.tmdb.org/t/p/h100", profile_path, sep = "")) # Make column for actor's photo
trending_df <- select(trending_df, name, photo)# Select only people and photo columns
trending_df <- head(trending_df, 5) # Include only first 5 actors
return(trending_df) # Return trending df
}
# A function that accesses information on trending data and returns a data frame of information
get_trending_table <- function(){
resource_uri <- paste0(base_uri,"/trending/person/week") # Paste together base uri and endpoint
response <- GET(resource_uri, query = key_param) # Use GET to send request to "Get Trending"
response_text <- content(response, as = "text") # Extract content of request's response
response_data <- fromJSON(response_text) # Convert JSON string into a list
trending_df <- as.data.frame(response_data$results) # Create data frame of trending data
trending_df <- filter(trending_df, known_for_department == "Acting") # Filter for only people known for acting
trending_df <- mutate(trending_df, photo = paste("https://image.tmdb.org/t/p/h100", profile_path, sep = "")) # Make column for actor's photo
trending_df <- select(trending_df, name, photo)# Select only people and photo columns
trending_df <- head(trending_df, 5) # Include only first 5 actors
return(trending_df) # Return trending df
}
trending_actor_df <- get_trending_table()
View(trending_actor_df)
# A function that accesses information on trending data and returns a data frame of information
get_trending_table <- function(){
resource_uri <- paste0(base_uri,"/trending/person/week") # Paste together base uri and endpoint
response <- GET(resource_uri, query = key_param) # Use GET to send request to "Get Trending"
response_text <- content(response, as = "text") # Extract content of request's response
response_data <- fromJSON(response_text) # Convert JSON string into a list
trending_df <- as.data.frame(response_data$results) # Create data frame of trending data
trending_df <- filter(trending_df, known_for_department == "Acting") # Filter for only people known for acting
trending_df <- mutate(trending_df, photo = print(paste("https://image.tmdb.org/t/p/h100", profile_path, sep = ""))) # Make column for actor's photo
trending_df <- select(trending_df, name, photo)# Select only people and photo columns
trending_df <- head(trending_df, 5) # Include only first 5 actors
return(trending_df) # Return trending df
}
get_trending_table <- function(){
resource_uri <- paste0(base_uri,"/trending/person/week") # Paste together base uri and endpoint
response <- GET(resource_uri, query = key_param) # Use GET to send request to "Get Trending"
response_text <- content(response, as = "text") # Extract content of request's response
response_data <- fromJSON(response_text) # Convert JSON string into a list
trending_df <- as.data.frame(response_data$results) # Create data frame of trending data
trending_df <- filter(trending_df, known_for_department == "Acting") # Filter for only people known for acting
trending_df <- mutate(trending_df, photo = paste("https://image.tmdb.org/t/p/h100", profile_path, sep = "")) # Make column for actor's photo
trending_df <- select(trending_df, name, photo)# Select only people and photo columns
trending_df <- head(trending_df, 5) # Include only first 5 actors
return(trending_df) # Return trending df
}
get_trending_table <- function(){
resource_uri <- paste0(base_uri,"/trending/person/week") # Paste together base uri and endpoint
response <- GET(resource_uri, query = key_param) # Use GET to send request to "Get Trending"
response_text <- content(response, as = "text") # Extract content of request's response
response_data <- fromJSON(response_text) # Convert JSON string into a list
trending_df <- as.data.frame(response_data$results) # Create data frame of trending data
trending_df <- filter(trending_df, known_for_department == "Acting") # Filter for only people known for acting
trending_df <- mutate(trending_df, photo = paste("!", "[name]", "https://image.tmdb.org/t/p/h100", profile_path, sep = "")) # Make column for actor's photo
trending_df <- select(trending_df, name, photo)# Select only people and photo columns
trending_df <- head(trending_df, 5) # Include only first 5 actors
return(trending_df) # Return trending df
}
get_trending_table <- function(){
resource_uri <- paste0(base_uri,"/trending/person/week") # Paste together base uri and endpoint
response <- GET(resource_uri, query = key_param) # Use GET to send request to "Get Trending"
response_text <- content(response, as = "text") # Extract content of request's response
response_data <- fromJSON(response_text) # Convert JSON string into a list
trending_df <- as.data.frame(response_data$results) # Create data frame of trending data
trending_df <- filter(trending_df, known_for_department == "Acting") # Filter for only people known for acting
trending_df <- mutate(trending_df, photo = paste("!", "[name]", "https://image.tmdb.org/t/p/h100", profile_path, sep = "")) # Make column for actor's photo
trending_df <- select(trending_df, name, photo)# Select only people and photo columns
trending_df <- head(trending_df, 5) # Include only first 5 actors
return(trending_df) # Return trending df
}
practice_analyze_actor <- analyze_actor(287)
uri <- paste0(base_uri, endpoint)
endpoint <- "reviews/search.json"
uri <- paste0(base_uri, endpoint)
query_params <- list("api-key" = nyt_key, "movie name" = movie_name)
library("httr")
library("jsonlite")
# Make sure you've set your working directory!
source("apikeych18.R")
source("apikeych18.R")
source("apikeych18.R")
source("apikeych18.R")
setwd("~/Desktop/book-exercises/chapter-18-exercises/exercise-1")
source("apikeych18.R")
movie_name <- "The Sound of Music"
base_uri <- "https://api.nytimes.com/svc/movies/v2/"
endpoint <- "reviews/search.json"
uri <- paste0(base_uri, endpoint)
query_params <- list("api-key" = nyt_key, "movie name" = movie_name)
response <- GET(uri, query = query_params)
body <- content(response, "text")
data <- fromJSON(body)
View(data)
View(response)
View(data)
View(data)
data[["fault"]][["faultstring"]]
response
body <- content(response, "text")
data <- fromJSON(body)
response <- GET(uri, query = query_params)
body <- content(response, "text", encoding = UTF-8)
data <- fromJSON(body)
response <- GET(uri, query = query_params)
body <- content(response, "text", encoding = "UTF-8")
data <- fromJSON(body)
View(data)
library("httr")
library("jsonlite")
# Be sure and check the README.md for complete instructions!
# Use `source()` to load your API key variable from the `apikey.R` file you made.
# Make sure you've set your working directory!
source("apikeych18.R")
movie_name <- "The Sound of Music"
base_uri <- "https://api.nytimes.com/svc/movies/v2/"
endpoint <- "reviews/search.json"
uri <- paste0(base_uri, endpoint)
query_params <- list("api-key" = nyt_key, "movie name" = movie_name)
# Extract the content and convert it from JSON
response <- GET(uri, query = query_params)
body <- content(response, "text", encoding = "UTF-8")
data <- fromJSON(body)
View(data)
# What kind of data structure did this produce? A data frame? A list?
is.list(data)
# Manually inspect the returned data and identify the content of interest
# (which are the movie reviews).
# Use functions such as `names()`, `str()`, etc.
names(data)
names(body$results)
library("dplyr")
names(body$results)
names(data$results)
# Flatten the movie reviews content into a data structure called `reviews`
reviews <- flatten(data$results)
View(reviews)
# the full article, each in their own variables
most_recent_review <- reviews[1, ]
headline <- first_review$headline
summary <- first_review$summary_short
link <- first_review$link.url
most_recent_review <- reviews[1, ]
headline <- most_recent_review$headline
summary <- most_recent_review$summary_short
link <- most_recent_review$link.url
review <- list( headline = headline,
summary = summary,
link = link)
View(review)
