famous_writer <- "Octavia Butler"
print(famous_writer)
# Practice failure
failed_attempt <- "HAHA
# Practice failure
failed_attempt <- "HAHA"
# Compare cups of coffee to tea
num_cups_coffee > cups_of_tea #returns logic value #TRUE
# Compare values that arent stored
4 = 6 #returns logic false
# Compare values that arent stored
4 == 6 #returns logic false
# Integar practice
my_integer <- 10
print(my_integer)
# Install stringer package
install.packages("stringr")
#How many i's are in Mississippi?
str_count("Mississippi","i") #4
library(stringr)
library("stringr")
str_count("Mississippi","i") #4
make_full_name <- function(first_name, last_name)
#Functions will return the value of the last line
full_name}
# Install stringer package
install.packages("stringr")
Yes
#How many i's are in Mississippi?
str_count("Mississippi","i") #4
library("stringr")
str_count("Mississippi","i") #4
make_full_name <- function(first_name, last_name)
{full_name <- paste(first_name, last_name)
full_name}
install.packages("stringr")
make_full_name <- function(first_name, last_name)
{full_name <- paste(first_name, last_name)
full_name}
my_name <- make_full_name("Rachel", "Neroutsos")
print(my_name)
my name <- make_full_name("Michelle", "Kaiser")
View(make_full_name)
make_full_name("Michelle", "Kaiser")
Moms_name <- make_full_name("Michelle", "Kaiser")
calculate_rect_area <- function(width, height){
return(width*height)
}
my_rectangle <- calculate_rect_area(9,9)
calculate_bmi <- function(ilbs, inches) {
height_in_meter<- inches*0.0254 weight_in_kg <- lbs*0.453592
bmi <- weight_in_kg/height_in_meter^2
bmi}
calculate_bmi <- function(ilbs, inches) {
height_in_meter<- inches*0.0254 weight_in_kg <- lbs*0.453592
bmi <- weight_in_kg/height_in_meter^2
bmi }
bmi }
calculate_bmi <- function(lbs, inches) {
height_in_meters <- inches * 0.0254
weight_in_kg <- lbs * 0.453592
bmi <- weight_in_kg / height_in_meter ^ 2
bmi
}
calculate_bmi(130, 65)
my_bmi <- calculate_bmi(130, 65)
calculate_bmi(130, 65)
lbs <- 130
inches <- 65
calculate_bmi(lbs, inches)
calculate_bmi(130, 65)
print(calculate_bmi)
add_title <- function(full_name, title) {
if(startsWith(full_name, title)) {
return(full_name)
}
name_with_title <- paste(title, full_name)
name_with_title
}
make_full_name(Rachel Neroutsos, VP Wellness)
make_full_name("Rachel", "VP Wellness")
2+3+0
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
#My first program
print("Hello World!")
print "Hello World"
my_num <- 201
my_num <- 201
my_num <- 201
my_num + 5
hours <- 15
pay_rate <- 12.5
earnings <- hours * pay_rate
# Create a variable `hometown` that stores the city in which you were born
hometown <- Shoreline
# Create a variable `hometown` that stores the city in which you were born
hometown <- "Shoreline"
# Assign your name to the variable `my_name`
my_name <- "Rachel"
# Assign your height (in inches) to a variable `my_height`
my_height <- "65"
# Create a variable `puppies` equal to the number of puppies you'd like to have
puppies <- "100"
# Create a variable `puppy_price`, which is how much you think a puppy costs
puppy_price <- 5
# Create a variable `total_cost` that has the total cost of all of your puppies
total_cost <- puppies * puppy_price
# Create a variable `total_cost` that has the total cost of all of your puppies
total_cost <- puppies*puppy_price
# Create a variable `total_cost` that has the total cost of all of your puppies
total_cost <- puppies * puppy_price
# Create a variable `hometown` that stores the city in which you were born
hometown <- "Shoreline"
# Assign your name to the variable `my_name`
my_name <- "Rachel"
# Assign your height (in inches) to a variable `my_height`
my_height <- "65"
# Create a variable `puppies` equal to the number of puppies you'd like to have
puppies <- 100
# Create a variable `puppy_price`, which is how much you think a puppy costs
puppy_price <- 5
# Create a variable `total_cost` that has the total cost of all of your puppies
total_cost <- puppies * puppy_price
# Create a boolean variable `too_expensive`, set to TRUE if the cost is greater
# than $1,000
too_expensive <- TRUE > 1000
# Create a variable `hometown` that stores the city in which you were born
hometown <- "Shoreline"
# Assign your name to the variable `my_name`
my_name <- "Rachel"
# Assign your height (in inches) to a variable `my_height`
my_height <- "65"
# Create a variable `puppies` equal to the number of puppies you'd like to have
puppies <- 100
# Create a variable `puppy_price`, which is how much you think a puppy costs
puppy_price <- 5
# Create a variable `total_cost` that has the total cost of all of your puppies
total_cost <- puppies * puppy_price
too_expensive <- TRUE
{ status <- "True"} if (total_cost > 1000)
{ status <- "False"} if(total_cost < 1000)
paste("Rachel", "Neroutsos")
paste("Rachel", "Neroutsos", "You Rock")
paste("Rachel", "Neroutsos" "You Rock")
paste("Rachel", "Neroutsos", "You Rock")
#round 5/7 to the nearest 0.01
round(5/7, 2)
round(0.0000001, 2)
round(0.99999, 2)
pasted result <- paste("Rachel", "Neroutsos", "You Rock")
pasted_result <- paste("Rachel", "Neroutsos", "You Rock")
print(pasted_result)
smallest_num <- min(1, 2, 5)
people <- c("Rachel", "Phoebe", "Jamie", "Julia")
length(people)
print(length(people))
one_to_ten <- seq(1, 10)
print(one_to_ten)
odd_numbers_to_ten <- seq(1, 10, 2)
print(odd_numbers_to_ten)
one_to_twenty <- 1:20
print(one_to_twenty)
v1 <- c(1, 2, 3, 4, 5)
v2 <- c(1, 2)
v3 <- v1 + v2
print(v3)
vector_plus_number <- v1 + 2
print(vector_plus_number)
is.vector(18) #true
x <- 7
length(x)
introduction <- c("Sup", "hi", "Hello")
nchar(introduction)
colors <- c("pink", "blue")
locations <- c("sky", "field")
paste(colors, locations
paste(colors, locations)
paste(colors, locations, sep = "")
first_person <- people[1]
print(first_person)
only_a <- vowels[1]
only_phoebe <- people[2]
print(only_phoebe)
all_but_phoebe <- people[-2]
print(all_but_phoebe)
others <- people[c(2, 4)]
print(others)
shoe_sizes <- c(5.5, 10, 6, 5.5, 9)
shoe_is_small <- shoe_sizes < 6.5
print(shoe_is_small)
small_shoes <- shoe_sizes[shoe_is_small]
print(small_shoes)
shoe_sizes[shoe_sizes < 6]
people[6] <- "Ellie"
print(people)
people[5] <- "Graham"
print(people)
Me <- list(first_name = "Rachel", job = "student",
salary = 0, in_union = TRUE
)
View(Me)
print(me)
print(Me)
Me <- favorites =list(music = "pop", food = "burriots")
print(Me)
ME$age <- 20
Me$favorite_food <- burritos
print(Me)
Me$age <- 20
Me$favorite_food <- "burritos"
print(Me)
Me$first_name <- "Rachel Neroutsos"
Me$in_union <- NULL
print(ME)
print(Me)
make_full_name <- function(first_name, last_name){
full_name <- paster(first_name, last_name)
return(full_name)
}
my_name <- make_full_name("Rachel", "Neroutsos")
make_full_name <- function(first_name, last_name){
full_name <- paste(first_name, last_name)
return(full_name)
}
my_name <- make_full_name("Rachel", "Neroutsos")
make_full_name <- function(first_name, last_name){
full_name <- paste(first_name,"of the house of" last_name)
return(full_name)
}
my_name <- make_full_name("Rachel", "Neroutsos")
make_full_name <- function(first_name, last_name){
full_name <- paste(first_name,"of the house of", last_name)
return(full_name)
}
my_name <- make_full_name("Rachel", "Neroutsos")
make_full_name <- function(first_name, last_name){
full_name <- paste(first_name,"of the house of", last_name, sep ="")
return(full_name)
}
my_name <- make_full_name("Rachel", "Neroutsos")
make_full_name <- function(first_name, last_name){
full_name <- paste(first_name,"of the house of", last_name)
return(full_name)
}
my_name <- make_full_name("Rachel", "Neroutsos")
print(make_full_name("Lucy"))
make_full_name <- function(first_name, last_name = "Smith"){
full_name <- paste(first_name,"of the house of", last_name)
return(full_name)
}
print(make_full_name("Lucy"))
person <- list(name = "Rachel", age = 20, did_homework = TRUE)
person$name
paste(person$name, person$did_homework)
print(paste(person$name, person$did_homework))
person[["first_name"]]
person[["first_name"]]
person[["name"]]
paste(which_name, "_name", sep = "")
paste(which_name,"_name",sep = "")
which_name <- "last"
paste(which_name,"_name",sep = "")
person[[paste(which_name, "_name")]]
person[[paste(which_name,"_name")]]
person[[paste(which_name,"_name", sep = "")]]
person[[paste0(which_name,"_name", sep = "")]]
person[[paste0(which_name,"_name")]]
which_name <- "last"
person$which_name
person <- list(name = "Rachel", last_name = "Neroutsos", age = 20, did_homework = TRUE)
person$which_name
which_name <- "last"
paste(which_name,"_name",sep = "")
person$which_name
person[["which_name"]]
which_name <- "last_name"
person[["which_name"]]
name <- c("Ada", "Bob", "Chris", "Diya", "Emma")
height <- c(64, 74, 69, 69, 71)
weight <- c(135, 156, 139, 144, 152)
people <- data.frame(name, height, weight, stringsAsFactors = FALSE)
nrow(people)
ncol(people)
dim(people)
colnames(people)
rownames(people)
head(people)
View(people)
people["Ada", "Height"]
people["Ada", "height"]
people[2, 3]
people[5, "height"]
people["Ada",]
head(people)
people[, c("height", "weight")]
people[, c("height", "weight")]
people[2:4, ]
people[people$weight > 10]
people[people$weight > 10,]
View(mtcars)
shirt_sizes <- c("small", "medium", "large", "small", "medium", "large")
shirt_sizes_factor <- as.factor(shirt_sizes)
print(shirt_sizes_factor)
length(shirt_sizes_factor)
num_factors <- as.factor(c(10, 10, 20,20, 30, 30, 40, 40))
print(num_factors)
num_factors *2
num_factors[1] <- 40
cost <- c(15.5, 17, 17, 14, 12, 23)
shirts_factor <- data.frame(shirt_sizes, cost)
print(shirts_factor)
is.factor(shirts_factor)
is.factor(shirts$shirt_size)
is.factor(small$shirt_size)
is.factor(shirt_sizes$small)
shirt_size_frames <- split(shirts_factor, shirts_factor$shirt_sizes)
print(shirt_size_frames)
tapply(shirts_factor$cost, shirts_factor$shirt_sizes, mean)
View(shirts_factor)
v1 <- c(1,2)
v2 <- c(3,4)
v3 <- c(v1+v2)
print(v3)
course <- list(code = "INFO 201",
section = "A",
enrolled = 147)
print(course[[code]])
print(course$code)
print(course("code"))
print(course[1])
print(course[[1]])
print(course$1)
print(course[1])
name <- c("Ada", "Chris", "Rachel")
name <- c("Ada", "Chris", "Rachel")
height <- (64, 74, 65)
weight <- (135, 156, 130)
name <- c("Ada", "Chris", "Rachel")
height <- (64, 74, 65)
weight <- (135, 156, 130)
height <- c(64, 74, 65)
weight <- c(135, 156, 130)
people <- data.frame(name, height, weight, stringsAsFactors = FALSE)
print(people)
people$name
print(people)
View(people)
nrow(people)
source('~/.active-rstudio-document', echo=TRUE)
colnames(people) <- c("first_name")
print(people)
nrow(people)
source('~/.active-rstudio-document', echo=TRUE)
people [2,2]
people[2:4,]
people[2:3,]
people[2:3]
people[people$name == "Rachel", "height"]
people$name == "Rachel"
people[["Rachel", "height"]]
people[people$weight == "Rachel", "weight"]
people[people$name =="Rachel","weight"]
employees <- paste("employee", 1:100)
print(employees)
?runif
salaries_2017 <- runif(100, 40000, 50000)
print(salaries_2017)
adjustments <- runif(100, -5000, 10000)
salaries_2017 <- data.frame(employees, salaries_2017, adjustments, stringsAsFactors = FALSE)
salaries <- data.frame(employees, salaries_2017, adjustments, stringsAsFactors = FALSE)
View(salaries)
View(salaries_2017)
View(salaries_2017)
# Exercise 2: working with data frames
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employees <- paste("employee", 1:100)
print(employees)
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salaries_2017 <- runif(100, 40000, 50000)
print(salaries_2017)
# Create a vector of 100 annual salary adjustments between -5000 and 10000.
# (A negative number represents a salary decrease due to corporate greed)
# Again use the `runif()` function to pick 100 random numbers in that range.
adjustments <- runif(100, -5000, 10000)
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees, salaries_2017, adjustments, stringsAsFactors = FALSE)
View(salaries)
salaries_2018 <- c(salaries_2017 + adjustments)
salaries["new.col"] <- salaries_2018
print(salaries)
salaries["salaries_2018"] <- salaries_2018
print(salaries)
salaries[-"new.col"]
# Exercise 2: working with data frames
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employees <- paste("employee", 1:100)
print(employees)
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salaries_2017 <- runif(100, 40000, 50000)
print(salaries_2017)
# Create a vector of 100 annual salary adjustments between -5000 and 10000.
# (A negative number represents a salary decrease due to corporate greed)
# Again use the `runif()` function to pick 100 random numbers in that range.
adjustments <- runif(100, -5000, 10000)
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees, salaries_2017, adjustments, stringsAsFactors = FALSE)
# Add a column to the `salaries` data frame that represents each person's
# salary in 2018 (e.g., with the salary adjustment added in).
salaries_2018 <- c(salaries_2017 + adjustments)
salaries["salaries_2018"] <- salaries_2018
print(salaries)
salaries[got_raise] <- salaries_2018 > 0
salaries["got_raise"] <- salaries_2018 > 0
print(salaries)
# Exercise 2: working with data frames
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employees <- paste("employee", 1:100)
print(employees)
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salaries_2017 <- runif(100, 40000, 50000)
print(salaries_2017)
# Create a vector of 100 annual salary adjustments between -5000 and 10000.
# (A negative number represents a salary decrease due to corporate greed)
# Again use the `runif()` function to pick 100 random numbers in that range.
adjustments <- runif(100, -5000, 10000)
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees, salaries_2017, adjustments, stringsAsFactors = FALSE)
# Add a column to the `salaries` data frame that represents each person's
# salary in 2018 (e.g., with the salary adjustment added in).
salaries_2018 <- c(salaries_2017 + adjustments)
salaries["salaries_2018"] <- salaries_2018
print(salaries)
# Add a column to the `salaries` data frame that has a value of `TRUE` if the
# person got a raise (their salary went up)
salaries["got_raise"] <- adjustments > 0
print(salaries)
salaries[salaries$employees == "employee 57", "salaries_2018"]
print(salaries[salaries$employees == "employee 57", "salaries_2018"])
salaries[salaries$got_raise == TRUE]
salaries[salaries$got_raise == "got_raise", TRUE]
# Exercise 2: working with data frames
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employees <- paste("employee", 1:100)
print(employees)
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salaries_2017 <- runif(100, 40000, 50000)
print(salaries_2017)
# Create a vector of 100 annual salary adjustments between -5000 and 10000.
# (A negative number represents a salary decrease due to corporate greed)
# Again use the `runif()` function to pick 100 random numbers in that range.
adjustments <- runif(100, -5000, 10000)
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees, salaries_2017, adjustments, stringsAsFactors = FALSE)
# Add a column to the `salaries` data frame that represents each person's
# salary in 2018 (e.g., with the salary adjustment added in).
salaries_2018 <- c(salaries_2017 + adjustments)
salaries["salaries_2018"] <- salaries_2018
print(salaries)
# Add a column to the `salaries` data frame that has a value of `TRUE` if the
# person got a raise (their salary went up)
salaries["got_raise"] <- adjustments > 0
print(salaries)
### Retrieve values from your data frame to answer the following questions
### Note that you should get the value as specific as possible (e.g., a single
### cell rather than the whole row!)
# What was the 2018 salary of Employee 57
salaries[salaries$employees == "employee 57", "salaries_2018"]
print(salaries[salaries$employees == "employee 57", "salaries_2018"])
nrow(salaries[salaries$got_raise == TRUE, ])
salaries[salaries$adjustments == max(salaries$adjustments)]
biggest_raise <- max(salaries$adjustments)
salaries[salaries$adjustments == biggest_raise]
salaries[salaries$adjustments == biggest_raise, ]
salaries[salaries$adjustments == biggest_raise, "adjustments"]
salaries[salaries$adjustments == biggest_raise, "employees"]
biggest_pay_cut <- min(salaries$adjustments)
salaries[salaries$adjustments == biggest_pay_cut, "adjustments"]
salaries[salaries$adjustments == biggest_pay_cut, "employees"]
average(salaries$adjustments)
mean(salaries$adjustments)
average_salary_change <- mean(salaries$adjustments)
mean(salaries$adjustments) < 0
no_raise <- salaries[salaries$got_raise == FALSE, ]
mean(no_raise)
mean(no_raise$adjustments)
no_raise <- salaries[salaries$got_raise == FALSE, ]
mean(no_raise$adjustments)
no_raise <- salaries[salaries$got_raise == FALSE, "adjustments"]
mean(no_raise)
mean(salaries[salaries$got_raise == FALSE, "adjustments"])
getwd()
setwd("~/Desktop/book-exercises/chapter-10-exercises/exercise-2")
write.csv(salaries, "salaries.cvs")
